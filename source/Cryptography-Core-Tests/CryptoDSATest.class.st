Class {
	#name : #CryptoDSATest,
	#superclass : #TestCase,
	#category : #'Cryptography-Core-Tests-DSA'
}

{ #category : #'accessing - data' }
CryptoDSATest >> dsaPrivateKey [
	^ DSAPrivateKey
		p: 8343811888543852523216773185009428259187948644369498021763210776677854991854533186365944349987509452133156416880596803846631577352387751880552969116768071
		q: 1197175832754339660404549606408619548226315875117
		g: 1433467472198821951822151391684734233265646022897503720591270330985699984763922266163182803556189497900262038518780931942996381297743579119123094520048965
		x: 957348690772296812
]

{ #category : #'accessing - data' }
CryptoDSATest >> dsaPublicKey [
	^ DSAPublicKey
		p: 8343811888543852523216773185009428259187948644369498021763210776677854991854533186365944349987509452133156416880596803846631577352387751880552969116768071
		q: 1197175832754339660404549606408619548226315875117
		g: 1433467472198821951822151391684734233265646022897503720591270330985699984763922266163182803556189497900262038518780931942996381297743579119123094520048965
		y: 4645213122572190617807944614677917601101008235397095646475699959851618402406173485853587185431290863173614335452934961425661774118334228449202337038283799
]

{ #category : #tests }
CryptoDSATest >> testDSASigningAndVerifying [
	| msg sig |
	msg := 'This is a test...'.
	sig := self dsaPrivateKey signMessage: msg.
	self assert: (self dsaPublicKey verify: sig isSignatureOf: msg)
]
