Class {
	#name : #CryptoElGamalTest,
	#superclass : #TestCase,
	#instVars : [
		'elGamalGenerators'
	],
	#category : #'Cryptography-Core-Tests-ElGamal'
}

{ #category : #accessing }
CryptoElGamalTest >> elGamalGeneratorOfSize: bits [
	^ elGamalGenerators 
		at: bits
		ifAbsent:
			[ "We should at least run the generator code to be sure it gets tested."
			ElGamalKeyGenerator new generateKeysOfSize: bits ]
]

{ #category : #'accessing - data' }
CryptoElGamalTest >> elGamalSizes [
	" ^#( 384 512 768 1024 2048 ) "

	^ #( 64 512 )
]

{ #category : #initialization }
CryptoElGamalTest >> initialize [
	super initialize.
	self
		initializeElGamalGenerators 
]

{ #category : #'private - initialization' }
CryptoElGamalTest >> initializeElGamalGenerators [
	elGamalGenerators := Dictionary new

		at: 512
		put:
			(ElGamalKeyGenerator basicNew instVarAt: 1 put: 14997038101000471656908825146898513563002169840799091820711874590927961409550512572428509314042888054869079913003134043613271458211821248434060678863943999; instVarAt: 2 put: 5361564564837954391893723942228287597694468337177799740324910691768071826418893848377283607598491893249419038971685698869752393654611799189607985606751717; instVarAt: 3 put: 14403853607602337679914835868070068312873008366859520925460200717630345023960768832597791608212285651911616689566045479334218776261375380546818169284633222; yourself) ;
		at: 768
		put:			"time to generate (1.3GHz laptop):  0:00:15:35.71"
			(ElGamalKeyGenerator basicNew instVarAt: 1 put: 1627332758910669005349673899493430221060426291376421198672767104943990188121953540024154874632086014644358143872462042844845205724969954316173299451580831206047385225398963232807212824639418997262644394808208010952184597290928279083; instVarAt: 2 put: 637353925196181662716534281309417485695156757195851477182610451877569627941960958993724216664932866527382869766700707821847752783200389297904293272300703210689296849853090260886879923123065483201535107015232963789463552975559327338; instVarAt: 3 put: 1382119909913548250681949383374805537713040446907845318586396338232006123603639447180435936299472529495807027144078416474159199852128556879205262745414383327498575491661863562367989514634268303068691788866483656964224388150042511145; yourself) ;

		at: 1024
		put:			"time to generate (1.3GHz laptop):  0:00:47:36.288"
			(ElGamalKeyGenerator basicNew instVarAt: 1 put: 187962930112203130099304875066550992472989894755401650849423145019107775415120153753379890896898159468888909642301301426861539004261391697652587719733773666895578476166092219394431668865654035130702071975227577489091637769871178365952593486414574736105032572563196302943313478263258078003344616094907879494183; instVarAt: 2 put: 101379856798288932395208478694565744867478878485170411883016695448216014229040233878325777809530026322981840402000631493588538174303052403820192798556612765069387657111145929959798776355339656977979943366339321986473695320247202765836954753923663960196445984306386126700715069527679925061366367143594939752311; instVarAt: 3 put: 166515262641331249052409678632107998360295620903954709872386461965666190307310785117636796778342643935688990419372071274434257100649608137040102448736492114478048476296404763678373473030171410691968491068014395855534564710476510365843729427792397083999439079005119559363379365315966400331819925035641027782262; yourself) ;

		at: 2048
		put:		"time to generate (1.3GHz laptop):  0:10:12:51.318"
			(ElGamalKeyGenerator basicNew instVarAt: 1 put: 43744550524640778592149701468321500307659483711161614933780759317538835660018499584863359875319736195497834842011206606111677937058576081833326123611960958651716618573704725631301784031019401088209827585193009767033768284401492225440611202384860046570022594166194086374043414523106999827113761864480276549701342546190042502746170762523030838415181639559467384246646980630730354186842888000169398408845020528778902676590121957276525059882643422002341827009727652951788957728483337275699584610825200769579177116050586037396083453876647282696542617919089209621847548931160771918736412809101535195712578982414848324842023; instVarAt: 2 put: 10712249143584610517062034706393748750841448112842264168635103160726320592857516094777199394038060786699730059487045452474549294208077531478734497996197653738535125856484035290422114479816131356589211862230201414545738081276869984650096988089393906878268413233796553170847827164856623679160971724585707100834284358979484189497136931922824212488771387863590257584963981297527371077585758027526026146064280994391353033474013279212299950762699784082492767463217396754190025401868735342133341990021934718202416382949744384380039458404029702056002896172354530543264720995892165487343788849479311283598302664326567957332056; instVarAt: 3 put: 34071313526526550964319859214388665314022163381999037971182526093331137188777643466498971633059086483606132787656147890791281175830824595869636722657222797206435777085613341792023090529456287226683946127489180430863850983140873843765939491483118681168525418491145087283699270267894578719923555878333437301788432335456184779553157758814789690967079053314015566185742547007752259485986859847843898791493225888341829225652240920951193796829090836607954659113174671564171844005862397483897607655449822950579836313328217159525558966188520476621728360816330014688201932196096220643747293750747578885327851920080280020579421; yourself) ;

	yourself
]

{ #category : #'private - utilities' }
CryptoElGamalTest >> performElGamalEncryption: bits [

	| elgamal pub priv c element |
	elgamal := self elGamalGeneratorOfSize: bits.
	pub := elgamal publicKey.
	priv := elgamal privateKey.
	element := SecureRandom picker nextBits: bits.
	c := pub encryptElement: element.
	self assert: (priv decryptElement: c) equals: element
]

{ #category : #'private - utilities' }
CryptoElGamalTest >> performElGamalSignature: bits [
	| elgamal pub priv signature message |
	elgamal := self elGamalGeneratorOfSize: bits.
	pub := elgamal publicKey.
	priv := elgamal privateKey.
	message := SecureRandom picker nextBits: bits.
	signature := priv signMessage: message.
	self assert: (pub verifySignature: signature onMessage: message)
]

{ #category : #tests }
CryptoElGamalTest >> testElGamalEncryption [
	self elGamalSizes do: [:eachBits | self performElGamalEncryption: eachBits]
]

{ #category : #tests }
CryptoElGamalTest >> testElGamalSignature [
	self elGamalSizes do: [:eachBits | self performElGamalSignature: eachBits]
]
